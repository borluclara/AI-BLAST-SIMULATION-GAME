{"ast":null,"code":"import Particle from './Particle';\nimport Explosion from './Explosion';\nimport Physics from '../utils/Physics';\nclass GameEngine {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.width = canvas.width;\n    this.height = canvas.height;\n    this.particles = [];\n    this.explosions = [];\n    this.isRunning = false;\n    this.lastTime = 0;\n\n    // Physics settings\n    this.gravity = 0.1;\n    this.friction = 0.98;\n    this.timeScale = 1;\n    this.physics = new Physics();\n\n    // Initialize with some ambient particles\n    this.initializeAmbientParticles();\n  }\n  initializeAmbientParticles() {\n    for (let i = 0; i < 50; i++) {\n      this.particles.push(new Particle({\n        x: Math.random() * this.width,\n        y: Math.random() * this.height,\n        vx: (Math.random() - 0.5) * 0.5,\n        vy: (Math.random() - 0.5) * 0.5,\n        size: Math.random() * 2 + 1,\n        color: `hsl(${Math.random() * 60 + 180}, 70%, 50%)`,\n        life: Math.random() * 100 + 50,\n        type: 'ambient'\n      }));\n    }\n  }\n  start() {\n    this.isRunning = true;\n    this.lastTime = performance.now();\n    this.gameLoop();\n  }\n  stop() {\n    this.isRunning = false;\n  }\n  reset() {\n    this.stop();\n    this.particles = [];\n    this.explosions = [];\n    this.initializeAmbientParticles();\n    this.clear();\n  }\n  resize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.canvas.width = width;\n    this.canvas.height = height;\n  }\n  createExplosion(x, y, intensity = 1) {\n    const explosion = new Explosion(x, y, intensity);\n    this.explosions.push(explosion);\n\n    // Create explosion particles\n    const particleCount = Math.floor(50 * intensity);\n    for (let i = 0; i < particleCount; i++) {\n      const angle = Math.PI * 2 * i / particleCount + Math.random() * 0.5;\n      const speed = Math.random() * 8 + 2;\n      const size = Math.random() * 4 + 2;\n      this.particles.push(new Particle({\n        x: x,\n        y: y,\n        vx: Math.cos(angle) * speed * intensity,\n        vy: Math.sin(angle) * speed * intensity,\n        size: size,\n        color: `hsl(${Math.random() * 60 + 10}, 100%, ${Math.random() * 30 + 60}%)`,\n        life: Math.random() * 60 + 40,\n        type: 'explosion'\n      }));\n    }\n  }\n  gameLoop() {\n    if (!this.isRunning) return;\n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastTime;\n    this.lastTime = currentTime;\n    this.update(deltaTime);\n    this.render();\n    requestAnimationFrame(() => this.gameLoop());\n  }\n  update(deltaTime) {\n    const dt = deltaTime * 0.016 * this.timeScale; // Normalize to 60fps\n\n    // Update explosions\n    this.explosions = this.explosions.filter(explosion => {\n      explosion.update(dt);\n      return !explosion.isDead();\n    });\n\n    // Update particles\n    this.particles = this.particles.filter(particle => {\n      particle.update(dt, this.gravity, this.friction);\n\n      // Boundary collision\n      this.physics.handleBoundaryCollision(particle, this.width, this.height);\n      return particle.life > 0;\n    });\n\n    // Add new ambient particles occasionally\n    if (Math.random() < 0.01 && this.particles.filter(p => p.type === 'ambient').length < 30) {\n      this.particles.push(new Particle({\n        x: Math.random() * this.width,\n        y: -10,\n        vx: (Math.random() - 0.5) * 0.5,\n        vy: Math.random() * 0.5,\n        size: Math.random() * 2 + 1,\n        color: `hsl(${Math.random() * 60 + 180}, 70%, 50%)`,\n        life: Math.random() * 100 + 50,\n        type: 'ambient'\n      }));\n    }\n  }\n  render() {\n    this.clear();\n\n    // Render explosions\n    this.explosions.forEach(explosion => {\n      explosion.render(this.ctx);\n    });\n\n    // Render particles\n    this.particles.forEach(particle => {\n      particle.render(this.ctx);\n    });\n\n    // Render UI info\n    this.renderInfo();\n  }\n  renderInfo() {\n    this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    this.ctx.font = '14px Arial';\n    this.ctx.fillText(`Particles: ${this.particles.length}`, 10, 20);\n    this.ctx.fillText(`Explosions: ${this.explosions.length}`, 10, 40);\n  }\n  clear() {\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n    this.ctx.fillRect(0, 0, this.width, this.height);\n  }\n}\nexport default GameEngine;","map":{"version":3,"names":["Particle","Explosion","Physics","GameEngine","constructor","canvas","ctx","getContext","width","height","particles","explosions","isRunning","lastTime","gravity","friction","timeScale","physics","initializeAmbientParticles","i","push","x","Math","random","y","vx","vy","size","color","life","type","start","performance","now","gameLoop","stop","reset","clear","resize","createExplosion","intensity","explosion","particleCount","floor","angle","PI","speed","cos","sin","currentTime","deltaTime","update","render","requestAnimationFrame","dt","filter","isDead","particle","handleBoundaryCollision","p","length","forEach","renderInfo","fillStyle","font","fillText","fillRect"],"sources":["C:/Users/THEO COMPUTERS/Desktop/AI-BLAST-SIMULATION-GAME/src/engine/GameEngine.js"],"sourcesContent":["import Particle from './Particle';\r\nimport Explosion from './Explosion';\r\nimport Physics from '../utils/Physics';\r\n\r\nclass GameEngine {\r\n  constructor(canvas) {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext('2d');\r\n    this.width = canvas.width;\r\n    this.height = canvas.height;\r\n    \r\n    this.particles = [];\r\n    this.explosions = [];\r\n    this.isRunning = false;\r\n    this.lastTime = 0;\r\n    \r\n    // Physics settings\r\n    this.gravity = 0.1;\r\n    this.friction = 0.98;\r\n    this.timeScale = 1;\r\n    \r\n    this.physics = new Physics();\r\n    \r\n    // Initialize with some ambient particles\r\n    this.initializeAmbientParticles();\r\n  }\r\n\r\n  initializeAmbientParticles() {\r\n    for (let i = 0; i < 50; i++) {\r\n      this.particles.push(new Particle({\r\n        x: Math.random() * this.width,\r\n        y: Math.random() * this.height,\r\n        vx: (Math.random() - 0.5) * 0.5,\r\n        vy: (Math.random() - 0.5) * 0.5,\r\n        size: Math.random() * 2 + 1,\r\n        color: `hsl(${Math.random() * 60 + 180}, 70%, 50%)`,\r\n        life: Math.random() * 100 + 50,\r\n        type: 'ambient'\r\n      }));\r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.isRunning = true;\r\n    this.lastTime = performance.now();\r\n    this.gameLoop();\r\n  }\r\n\r\n  stop() {\r\n    this.isRunning = false;\r\n  }\r\n\r\n  reset() {\r\n    this.stop();\r\n    this.particles = [];\r\n    this.explosions = [];\r\n    this.initializeAmbientParticles();\r\n    this.clear();\r\n  }\r\n\r\n  resize(width, height) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n  }\r\n\r\n  createExplosion(x, y, intensity = 1) {\r\n    const explosion = new Explosion(x, y, intensity);\r\n    this.explosions.push(explosion);\r\n    \r\n    // Create explosion particles\r\n    const particleCount = Math.floor(50 * intensity);\r\n    for (let i = 0; i < particleCount; i++) {\r\n      const angle = (Math.PI * 2 * i) / particleCount + Math.random() * 0.5;\r\n      const speed = Math.random() * 8 + 2;\r\n      const size = Math.random() * 4 + 2;\r\n      \r\n      this.particles.push(new Particle({\r\n        x: x,\r\n        y: y,\r\n        vx: Math.cos(angle) * speed * intensity,\r\n        vy: Math.sin(angle) * speed * intensity,\r\n        size: size,\r\n        color: `hsl(${Math.random() * 60 + 10}, 100%, ${Math.random() * 30 + 60}%)`,\r\n        life: Math.random() * 60 + 40,\r\n        type: 'explosion'\r\n      }));\r\n    }\r\n  }\r\n\r\n  gameLoop() {\r\n    if (!this.isRunning) return;\r\n\r\n    const currentTime = performance.now();\r\n    const deltaTime = currentTime - this.lastTime;\r\n    this.lastTime = currentTime;\r\n\r\n    this.update(deltaTime);\r\n    this.render();\r\n\r\n    requestAnimationFrame(() => this.gameLoop());\r\n  }\r\n\r\n  update(deltaTime) {\r\n    const dt = deltaTime * 0.016 * this.timeScale; // Normalize to 60fps\r\n\r\n    // Update explosions\r\n    this.explosions = this.explosions.filter(explosion => {\r\n      explosion.update(dt);\r\n      return !explosion.isDead();\r\n    });\r\n\r\n    // Update particles\r\n    this.particles = this.particles.filter(particle => {\r\n      particle.update(dt, this.gravity, this.friction);\r\n      \r\n      // Boundary collision\r\n      this.physics.handleBoundaryCollision(particle, this.width, this.height);\r\n      \r\n      return particle.life > 0;\r\n    });\r\n\r\n    // Add new ambient particles occasionally\r\n    if (Math.random() < 0.01 && this.particles.filter(p => p.type === 'ambient').length < 30) {\r\n      this.particles.push(new Particle({\r\n        x: Math.random() * this.width,\r\n        y: -10,\r\n        vx: (Math.random() - 0.5) * 0.5,\r\n        vy: Math.random() * 0.5,\r\n        size: Math.random() * 2 + 1,\r\n        color: `hsl(${Math.random() * 60 + 180}, 70%, 50%)`,\r\n        life: Math.random() * 100 + 50,\r\n        type: 'ambient'\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.clear();\r\n    \r\n    // Render explosions\r\n    this.explosions.forEach(explosion => {\r\n      explosion.render(this.ctx);\r\n    });\r\n    \r\n    // Render particles\r\n    this.particles.forEach(particle => {\r\n      particle.render(this.ctx);\r\n    });\r\n    \r\n    // Render UI info\r\n    this.renderInfo();\r\n  }\r\n\r\n  renderInfo() {\r\n    this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n    this.ctx.font = '14px Arial';\r\n    this.ctx.fillText(`Particles: ${this.particles.length}`, 10, 20);\r\n    this.ctx.fillText(`Explosions: ${this.explosions.length}`, 10, 40);\r\n  }\r\n\r\n  clear() {\r\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n    this.ctx.fillRect(0, 0, this.width, this.height);\r\n  }\r\n}\r\n\r\nexport default GameEngine;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}