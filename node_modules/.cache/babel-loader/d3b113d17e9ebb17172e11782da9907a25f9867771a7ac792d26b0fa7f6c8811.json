{"ast":null,"code":"class Explosion {\n  constructor(x, y, intensity = 1) {\n    this.x = x;\n    this.y = y;\n    this.intensity = intensity;\n    this.radius = 0;\n    this.maxRadius = 50 * intensity;\n    this.life = 60;\n    this.maxLife = this.life;\n    this.expandSpeed = 3 * intensity;\n    this.color = `hsl(${Math.random() * 60 + 10}, 100%, 70%)`;\n  }\n  update(deltaTime) {\n    if (this.radius < this.maxRadius) {\n      this.radius += this.expandSpeed * deltaTime;\n    }\n    this.life -= deltaTime;\n  }\n  render(ctx) {\n    const alpha = Math.max(0, this.life / this.maxLife);\n    ctx.save();\n    ctx.globalAlpha = alpha * 0.6;\n\n    // Outer blast wave\n    const outerGradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.radius);\n    outerGradient.addColorStop(0, 'rgba(255, 255, 255, 0.8)');\n    outerGradient.addColorStop(0.3, this.color);\n    outerGradient.addColorStop(1, 'rgba(255, 100, 0, 0)');\n    ctx.fillStyle = outerGradient;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Inner core\n    if (this.life > this.maxLife * 0.7) {\n      ctx.globalAlpha = alpha;\n      const coreGradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.radius * 0.3);\n      coreGradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\n      coreGradient.addColorStop(1, 'rgba(255, 200, 0, 0)');\n      ctx.fillStyle = coreGradient;\n      ctx.beginPath();\n      ctx.arc(this.x, this.y, this.radius * 0.3, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // Shock wave ring\n    if (this.radius > this.maxRadius * 0.3) {\n      ctx.globalAlpha = alpha * 0.8;\n      ctx.strokeStyle = `rgba(255, 255, 255, ${alpha})`;\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.arc(this.x, this.y, this.radius * 0.9, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n    ctx.restore();\n  }\n  isDead() {\n    return this.life <= 0;\n  }\n  getBlastForce(particleX, particleY) {\n    const dx = particleX - this.x;\n    const dy = particleY - this.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    if (distance < this.radius && distance > 0) {\n      const force = (this.maxRadius - distance) / this.maxRadius * this.intensity;\n      return {\n        fx: dx / distance * force,\n        fy: dy / distance * force\n      };\n    }\n    return {\n      fx: 0,\n      fy: 0\n    };\n  }\n}\nexport default Explosion;","map":{"version":3,"names":["Explosion","constructor","x","y","intensity","radius","maxRadius","life","maxLife","expandSpeed","color","Math","random","update","deltaTime","render","ctx","alpha","max","save","globalAlpha","outerGradient","createRadialGradient","addColorStop","fillStyle","beginPath","arc","PI","fill","coreGradient","strokeStyle","lineWidth","stroke","restore","isDead","getBlastForce","particleX","particleY","dx","dy","distance","sqrt","force","fx","fy"],"sources":["C:/Users/THEO COMPUTERS/Desktop/AI-BLAST-SIMULATION-GAME/src/engine/Explosion.js"],"sourcesContent":["class Explosion {\r\n  constructor(x, y, intensity = 1) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.intensity = intensity;\r\n    this.radius = 0;\r\n    this.maxRadius = 50 * intensity;\r\n    this.life = 60;\r\n    this.maxLife = this.life;\r\n    this.expandSpeed = 3 * intensity;\r\n    this.color = `hsl(${Math.random() * 60 + 10}, 100%, 70%)`;\r\n  }\r\n\r\n  update(deltaTime) {\r\n    if (this.radius < this.maxRadius) {\r\n      this.radius += this.expandSpeed * deltaTime;\r\n    }\r\n    this.life -= deltaTime;\r\n  }\r\n\r\n  render(ctx) {\r\n    const alpha = Math.max(0, this.life / this.maxLife);\r\n    \r\n    ctx.save();\r\n    ctx.globalAlpha = alpha * 0.6;\r\n    \r\n    // Outer blast wave\r\n    const outerGradient = ctx.createRadialGradient(\r\n      this.x, this.y, 0,\r\n      this.x, this.y, this.radius\r\n    );\r\n    outerGradient.addColorStop(0, 'rgba(255, 255, 255, 0.8)');\r\n    outerGradient.addColorStop(0.3, this.color);\r\n    outerGradient.addColorStop(1, 'rgba(255, 100, 0, 0)');\r\n    \r\n    ctx.fillStyle = outerGradient;\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    \r\n    // Inner core\r\n    if (this.life > this.maxLife * 0.7) {\r\n      ctx.globalAlpha = alpha;\r\n      const coreGradient = ctx.createRadialGradient(\r\n        this.x, this.y, 0,\r\n        this.x, this.y, this.radius * 0.3\r\n      );\r\n      coreGradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\r\n      coreGradient.addColorStop(1, 'rgba(255, 200, 0, 0)');\r\n      \r\n      ctx.fillStyle = coreGradient;\r\n      ctx.beginPath();\r\n      ctx.arc(this.x, this.y, this.radius * 0.3, 0, Math.PI * 2);\r\n      ctx.fill();\r\n    }\r\n    \r\n    // Shock wave ring\r\n    if (this.radius > this.maxRadius * 0.3) {\r\n      ctx.globalAlpha = alpha * 0.8;\r\n      ctx.strokeStyle = `rgba(255, 255, 255, ${alpha})`;\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      ctx.arc(this.x, this.y, this.radius * 0.9, 0, Math.PI * 2);\r\n      ctx.stroke();\r\n    }\r\n    \r\n    ctx.restore();\r\n  }\r\n\r\n  isDead() {\r\n    return this.life <= 0;\r\n  }\r\n\r\n  getBlastForce(particleX, particleY) {\r\n    const dx = particleX - this.x;\r\n    const dy = particleY - this.y;\r\n    const distance = Math.sqrt(dx * dx + dy * dy);\r\n    \r\n    if (distance < this.radius && distance > 0) {\r\n      const force = (this.maxRadius - distance) / this.maxRadius * this.intensity;\r\n      return {\r\n        fx: (dx / distance) * force,\r\n        fy: (dy / distance) * force\r\n      };\r\n    }\r\n    \r\n    return { fx: 0, fy: 0 };\r\n  }\r\n}\r\n\r\nexport default Explosion;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}